reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
prepare_docker()
import duckdb
from palmerpenguins import penguins
# Create a connection to the database
con = duckdb.connect('my-db.duckdb')
# Drop the table if it exists
con.execute('DROP TABLE IF EXISTS penguins')
# Load the penguins data
df = penguins.load_penguins()
# Create the penguins table
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
# Close the connection
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
prepare_docker()
install.packages("vetiver")
prepare_docker()
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
install.packages("vetiver")
install.packages("vetiver")
library(vetiver)
install.packages("https://vetiver.rstudio.com/get-started/deploy.html#prepare-a-dockerfile")
install.packages("https://vetiver.rstudio.com/get-started/deploy.html#prepare-a-dockerfile")
install.packages("https://vetiver.rstudio.com/get-started/deploy.html#prepare-a-dockerfile")
install.packages("vetiver")
library(vetiver)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
dbDisconnect(con, shutdown=TRUE)
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
install.packages("parsnip")
install.packages("rmarkdown")
install.packages("vetiver")
install.packages("rmarkdown")
install.packages("parsnip")
devtools::install_github("rstudio/rmarkdown")
renv::status()
install.packages("vetiver")
install.packages("renv", repos = "https://mran.microsoft.com/snapshot/2024-03-11")
install.packages("vetiver", repos = "https://mran.microsoft.com/snapshot/2024-03-11")
renv::status()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(vetiver)
install.packages("vetiver")
install.packages("rmarkdown")
install.packages("boot", lib="C:/Users/C25Julia.Razzino/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/7cdaab8d")
install.packages("vetiver")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(vetiver)
prepare_docker()
library(vetiver)
# Prepare the Docker container
prepare_docker()
library(vetiver)
# Prepare the Docker container
prepare_docker()
library(vetiver)
vetiver_prepare_docker(df, penguins)
library(vetiver)
vetiver_prepare_docker(df, penguins)
library(vetiver)
vetiver_prepare_docker(model_board, penguins)
?vetiver_deploy_rsconnect
library(vetiver)
vetiver_deploy_rsconnect(model_board, "c25julia.razzino/penguins")
library(vetiver)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(vetiver)
vetiver_deploy_rsconnect(
board = board,
name = "c25julia.razzino/penguin",
predict_args = list(debug = TRUE),
account = "c25julia.razzino"
)
library(rsconnect)
install.packages("rsconnect")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(vetiver)
library(rsconnect)
renv::status()
?renv::status()
renv::restore()
renv::snapshot()
install.packages("packrat")
install.packages("packrat")
install.packages(c("digest", "tidyselect"))
install.packages("boot", lib="C:/Users/C25Julia.Razzino/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/7cdaab8d")
install.packages("packrat")
renv::snapshot()
renv::snapshot()
install.packages("rsconnect")
renv::dependencies()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
renv::snapshot()
renv::snapshot()
install.packages("rsconnect")
renv::snapshot()
install.packages("rstudioapi")
install.packages("rstudioapi")
renv::snapshot()
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("boot", lib="C:/Users/C25Julia.Razzino/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/7cdaab8d")
install.packages("rstudioapi")
renv::snapshot()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(vetiver)
#library(rsconnect)
# Connect to your RStudio Connect server
#connect_server(url = "https://your-rstudio-connect-server.com")
# Get account information
#account_info <- accountDetails()
# Print account information
#print(account_info)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
quit
renv::snapshot()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import penguins
df = penguins.load_penguins().dropna()
df.head(3)
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
# app.run(port = 8080)
# Create the penguins table
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
#import requests
#req_data = {
# "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]
con.close()
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
library(vetiver)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#library(rsconnect)
# Connect to your RStudio Connect server
#connect_server(url = "https://your-rstudio-connect-server.com")
# Get account information
#account_info <- accountDetails()
# Print account information
#print(account_info)
#vetiver_deploy_rsconnect(
#   board = board,
#  name = "c25julia.razzino/penguin",
# predict_args = list(debug = TRUE),
#account = "c25julia.razzino"
#)
#vetiver_prepare_docker(board = board, penguins)
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins,append = TRUE)#
#df %>%
# group_by(species, sex) %>%
#summarise(
# across(
#    ends_with("mm") | ends_with("g"),
# \(x) mean(x, na.rm = TRUE)
#)
#) %>%
#dplyr::collect() %>%
#knitr::kable()
#DBI::dbDisconnect(con, shutdown=TRUE)
#req <- httr2::request("http://127.0.0.1:8080/predict") |>
#httr2::req_body_json(
# list(
#  list(
#   "bill_length_mm" = 0,
#  "species_Chinstrap" = FALSE,
# "species_Gentoo" = FALSE,
#"sex_male" = FALSE
#)
#)
#) |>
#httr2::req_perform()
#res <- httr2::resp_body_json(req)$predict[[1]]
# to do: add something that gets rid of the extra output
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
library(vetiver)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins,append = TRUE)
duckdb::duckdb_shutdown(drv)
con<- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# to do: add something that gets rid of the extra output
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
library(vetiver)
con<- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
con
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins,append = TRUE)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#library(rsconnect)
# Connect to your RStudio Connect server
#connect_server(url = "https://your-rstudio-connect-server.com")
# Get account information
#account_info <- accountDetails()
# Print account information
#print(account_info)
#vetiver_deploy_rsconnect(
#   board = board,
#  name = "c25julia.razzino/penguin",
# predict_args = list(debug = TRUE),
#account = "c25julia.razzino"
#)
#vetiver_prepare_docker(board = board, penguins)
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins,append = TRUE)#
#df %>%
# group_by(species, sex) %>%
#summarise(
# across(
#    ends_with("mm") | ends_with("g"),
# \(x) mean(x, na.rm = TRUE)
#)
#) %>%
#dplyr::collect() %>%
#knitr::kable()
#DBI::dbDisconnect(con, shutdown=TRUE)
#req <- httr2::request("http://127.0.0.1:8080/predict") |>
#httr2::req_body_json(
# list(
#  list(
#   "bill_length_mm" = 0,
#  "species_Chinstrap" = FALSE,
# "species_Gentoo" = FALSE,
#"sex_male" = FALSE
#)
#)
#) |>
#httr2::req_perform()
#res <- httr2::resp_body_json(req)$predict[[1]]
DBI::dbDisconnect(con, shutdown=TRUE)
from vetiver import VetiverModel
library(vetiver)
library(pins)
# Connect to the board folder where the model is stored
board <- board_folder("/data/model", allow_pickle_read = TRUE)
library(vetiver)
library(pins)
# Connect to the board folder where the model is stored
board <- board_cache("/data/model")
install.packages("pins")
library(vetiver)
library(pins)
# Connect to the board folder where the model is stored
board <- board_cache("/data/model")
renv::snapshot()
reticulate::repl_python()
from vetiver import VetiverModel
import vetiver
import pins
b = pins.board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20230422T102952Z-cb1f9')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Define the pins board
board = pins.board_cache("/data/model")
# Ensure the pin 'penguin_model' exists in the pins board
if 'penguin_model' not in board.list():
raise ValueError("Pin 'penguin_model' does not exist in the pins board.")
# Load the VetiverModel from the pin
v = VetiverModel.from_pin(board, 'penguin_model', version='20230422T102952Z-cb1f9')
# Create a VetiverAPI instance
vetiver_api = VetiverAPI(v)
# Access the 'app' attribute of the VetiverAPI instance
api = vetiver_api.app
b = pins.board_folder('C:/Users/C25Julia.Razzino/Downloads/M378/data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20230422T102952Z-cb1f9')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
