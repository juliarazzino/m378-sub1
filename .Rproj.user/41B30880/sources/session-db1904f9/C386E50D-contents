---
title: "Model"
format:
  html:
    code-fold: true
---

```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import penguins
from vetiver import VetiverAPI
from vetiver import VetiverModel
import requests
import vetiver
import pins
```

## Get Data

```{python}
df = penguins.load_penguins().dropna()

df.head(3)
```

```{python}
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
```

## Define Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

# Lab 2

1.  Write model outside of the bundle

```{python}
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

2.  Create an API for model predictions

Auto-generate a `{fastAPI}` from this model with:

```{python}
app = VetiverAPI(v, check_prototype=True)
```

Run in python environment with: http://localhost:8080 or with the code chunk below

```{python}
# app.run(port = 8080)
```

# Lab 3

### Step 1: Put Data into DuckDB

```{python}
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
```

### **Step 2: Call the model API from code**

```{python}
#req_data = {
 # "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]

```



```{python}
con.close()
```

### Step 3: Build a Shiny App

-   Code is in app.py and app.R
